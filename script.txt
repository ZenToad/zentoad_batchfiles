-----------------
00_batch.bat
-----------------
Start out with an empty script.

We have a main.c we are going to compile.

cl src\main.c

Great.  It worked, and it is very simple.

Also, I don't like that is spits out each line while running.
And the main.obj file is added to the main director.

Let's fix the first part.
if we add 

    echo off

to the start this will only show the output.
So the REM comments will no longer be displayed.

but 'echo off' is still displayed.  Fix that too

    @echo off

add -nologo to the cl command to stop printing out
the compiler info
https://learn.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-alphabetically?view=msvc-170

-----------------
01_batch.bat
-----------------
Notice this puts the main.obj and main.exe in the same folder as
the batch file.  That's going to get messy real fast.

What I'd like is to put all this stuff in a folder 
called 'bin'

you might try this:

mkdir bin
cd bin

so what does that do?
well, we can't find the file.
And now run it again?  opps, we are now in a different directory...

If we run again we see a message
'A subdirectory or file bin already exists.'

Ugh...  Why is this so hard?

***

First let's get rid of the message.

    if not exist bin mkdir bin

Now we can't find the main.c because we are in the bin folder.

cl ..\src\main.c -nologo

***

But now I'd like to go back to the directory we ran the batch file from,
and not be inside a different directory after the script runs.

pushd to the rescue (push directory, pop directory)
pushd bin
popd


-----------------
02_batch.bat
-----------------

Now we add a simple library.h/library.c file to 01_main.c
When we try and compile that we get this error:

C:\stream\dev-env\zentoad_batchfiles (main -> origin)
位 02_batch.bat
01_main.c
..\src\01_main.c(3): fatal error C1083: Cannot open include file: 'library.h': No such file or directory

Why can't it find the library?  We have to tell the compiler where to find
the necessary include files.

We do this with the -I or /I flag

    cl ..\src\01_main.c -I..\include -nologo

But now we get this error:

C:\stream\dev-env\zentoad_batchfiles (main -> origin)
位 02_batch.bat
01_main.c
01_main.obj : error LNK2019: unresolved external symbol library_hello referenced in function main
01_main.exe : fatal error LNK1120: 1 unresolved externals

Let's ask chatGPT what this error means.

    'error LNK2019: unresolved external symbol'

This error happens because there source code for the library isn't found.
Sometimes this code is found in a Dynamic Link Library (*.dll) or
a static library file (*.lib), but in this case we are just including
the source code for the library in the project.

    cl ..\src\01_main.c ..\src\library.c -I..\include -nologo

C:\stream\dev-env\zentoad_batchfiles (main -> origin)
位 bin\01_main.exe
Hello world!
Hello from library!!!

-----------------
03_batch.bat
-----------------

Ok we have seen how to change the directory to somewhere
else and go back, how to add an include folder to the
project, and how to add other source files.


What is next?

I'm getting tired of compiling the code and then also typing
in the command to run the code, so let's just run the
code after it compiles.

pushd bin
    REM  cl ..\src\01_main.c -I..\include -nologo
    cl ..\src\01_main.c ..\src\library.c -I..\include -nologo
    01_main.exe
popd

That was easy.
What else do we need?  

First build 03_main.c, and then add an error.

Question:  What if the code has an error and won't compile?

03_main.c has an error... and yet it still runs.  That 
isn't what we want at all.

We would like the script to only run the exe if the compile
was successful, and print an error if it was not.

    if "%ERRORLEVEL%" EQU "0" (
        03_main.exe
    )
    if "%ERRORLEVEL%" NEQ "0" (
        echo Error compiling code
    )

-----------------
04_batch.bat
-----------------
You can see the 

    cl ..\src\03_main.c ..\src\library.c -I..\include -nologo

is already starting to get long.  You can imagine a larger project
will have a ton of stuff here.

Let's add some variables to hold all this stuff and make it
easier to read

This is how you set a variable:

    set var=value 

and this is how you get the value from a variable:

    %var%


set target=..\src\04_main.c
set source_files=..\src\library.c
set include_dirs=-I..\include
set flags=-nologo

    cl %target% %source_files% %include_dirs% %flags%

Finally, I don't like the 04_main.exe being in two different
places so let's fix that.

set target_number=04
set target=..\src\%target_number%_main.c

    %target_number%_main.exe

This is a bit fancy for such a simple example, but it shows
how you can use one %var% when making another variable.

-----------------
05_batch.bat
-----------------

Adding labels and goto's

It isn't always necessary but it is good to know
that you can use labels and goto to jump around
in the batch file.

Don't forget to change the target number

    set target_number=05

If there is an error it will jump to bad, otherwise
it will jump to good.

C:\stream\dev-env\zentoad_batchfiles (main -> origin)
位 05_batch.bat
05_main.c
..\src\05_main.c(8): error C2143: syntax error: missing ';' before 'return'
library.c
Generating Code...
FAILED

This is a good tool to have in your toolkit.


@echo off
xcopy "C:\SourceFolder\file.txt" "D:\DestinationFolder" /Y

