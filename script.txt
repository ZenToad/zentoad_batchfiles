-----------------
00_batch.bat
-----------------
Start out with an empty script.

We have a main.c we are going to compile.

cl src\main.c

Great.  It worked, and it is very simple.

Also, I don't like that is spits out each line while running.
And the main.obj file is added to the main director.

Let's fix the first part.
if we add 

    echo off

to the start this will only show the output.
So the REM comments will no longer be displayed.

but 'echo off' is still displayed.  Fix that too

    @echo off

add -nologo to the cl command to stop printing out
the compiler info
https://learn.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-alphabetically?view=msvc-170

-----------------
01_batch.bat
-----------------
Notice this puts the main.obj and main.exe in the same folder as
the batch file.  That's going to get messy real fast.

What I'd like is to put all this stuff in a folder 
called 'bin'

you might try this:

mkdir bin
cd bin

so what does that do?
well, we can't find the file.
And now run it again?  opps, we are now in a different directory...

If we run again we see a message
'A subdirectory or file bin already exists.'

Ugh...  Why is this so hard?

***

First let's get rid of the message.

    if not exist bin mkdir bin

Now we can't find the main.c because we are in the bin folder.

cl ..\src\main.c -nologo

***

But now I'd like to go back to the directory we ran the batch file from,
and not be inside a different directory after the script runs.

pushd to the rescue (push directory, pop directory)
pushd bin
popd


-----------------
02_batch.bat
-----------------

Now we add a simple library.h/library.c file to 02_main.c
When we try and compile that we get this error:

C:\stream\dev-env\zentoad_batchfiles (main -> origin)
λ 02_batch.bat
01_main.c
..\src\01_main.c(3): fatal error C1083: Cannot open include file: 'library.h': No such file or directory

Why can't it find the library?  We have to tell the compiler where to find
the necessary include files.

We do this with the -I or /I flag

    cl ..\src\01_main.c -I..\include -nologo

But now we get this error:

C:\stream\dev-env\zentoad_batchfiles (main -> origin)
λ 02_batch.bat
01_main.c
01_main.obj : error LNK2019: unresolved external symbol library_hello referenced in function main
01_main.exe : fatal error LNK1120: 1 unresolved externals

Let's ask chatGPT what this error means.

    'error LNK2019: unresolved external symbol'

This error happens because there source code for the library isn't found.
Sometimes this code is found in a Dynamic Link Library (*.dll) or
a static library file (*.lib), but in this case we are just including
the source code for the library in the project.

    cl ..\src\01_main.c ..\src\library.c -I..\include -nologo

C:\stream\dev-env\zentoad_batchfiles (main -> origin)
λ bin\01_main.exe
Hello world!
Hello from library!!!

-----------------
03_batch.bat
-----------------

Ok we have seen how to change the directory to somewhere
else and go back, how to add an include folder to the
project, and how to add other source files.


What is next?

I'm getting tired of compiling the code and then also typing
in the command to run the code, so let's just run the
code after it compiles.

pushd bin
    REM  cl ..\src\03_main.c -I..\include -nologo
    cl ..\src\03_main.c ..\src\library.c -I..\include -nologo
    03_main.exe
popd

That was easy.
What else do we need?  

First build 03_main.c, and then add an error.

Question:  What if the code has an error and won't compile?

03_main.c has an error... and yet it still runs.  That 
isn't what we want at all.

We would like the script to only run the exe if the compile
was successful, and print an error if it was not.

    if "%ERRORLEVEL%" EQU "0" (
        03_main.exe
    )
    if "%ERRORLEVEL%" NEQ "0" (
        echo Error compiling code
    )

-----------------
04_batch.bat
-----------------
You can see the 

    cl ..\src\03_main.c ..\src\library.c -I..\include -nologo

is already starting to get long.  You can imagine a larger project
will have a ton of stuff here.

Let's add some variables to hold all this stuff and make it
easier to read

This is how you set a variable:

    set var=value 

and this is how you get the value from a variable:

    %var%


set target=..\src\04_main.c
set source_files=..\src\library.c
set include_dirs=-I..\include
set flags=-nologo

    cl %target% %source_files% %include_dirs% %flags%

Finally, I don't like the 04_main.exe being in two different
places so let's fix that.

set target_number=04
set target=..\src\%target_number%_main.c

    %target_number%_main.exe

This is a bit fancy for such a simple example, but it shows
how you can use one %var% when making another variable.

-----------------
05_batch.bat
-----------------

Adding labels and goto's

It isn't always necessary but it is good to know
that you can use labels and goto to jump around
in the batch file.

Don't forget to change the target number

    set target_number=05

If there is an error it will jump to bad, otherwise
it will jump to good.

C:\stream\dev-env\zentoad_batchfiles (main -> origin)
λ 05_batch.bat
05_main.c
..\src\05_main.c(8): error C2143: syntax error: missing ';' before 'return'
library.c
Generating Code...
FAILED

This is a good tool to have in your toolkit.


-----------------
06_batch.bat
-----------------
What if you want to copy files after you have compiled
everything?  Look no further than 'xcopy'


The xcopy command is used in batch files to 
copy files and directories from one location to another. 
It provides more advanced copying options compared to the 
basic copy command. 

Here's the basic syntax of the xcopy command:

    xcopy source destination [options]

To learn more about the available options, you can 
open a Command Prompt and type:

    xcopy /? 

to see the complete list of options and their explanations.

What we can do now is make another folder 'build' and only copy in 
the executable and leave all the intermediate files in the 'bin' folder.
if we just add

    xcopy %target_number%_main.exe ..\build 

but the copytests folder does not exist we get this weird message when
we run the batch file and waits for a keypress:

    Does ..\copytests specify a file name
    or directory name on the target
    (F = file, D = directory)? 


Currently I use these two options to keep this from happening

  /I           If destination does not exist and copying more than one file,
               assumes that destination must be a directory.
  /Y           Suppresses prompting to confirm you want to overwrite an
               existing destination file.

If we run this again and the folder already exists we don't get this message
but I would rather never have this show up.
If we delete the copytests folder and add the options it will just work.

    xcopy %target_number%_main.exe ..\build /I /Y

Hmm, even with these it still doesn't work.
The problem here is we are only coping one file, so...
Took a bit to figure out for a directory you need a '\' at the end 
of the path

    xcopy %target_number%_main.exe ..\build\ /I /Y

What we can do now is make another folder 'build' and only copy in 
the executable and leave all the intermediate files in the 'bin' folder.

    if not exist build mkdir build

How do we delete a folder with files?  
This uses the 'rmdir' command.  
Let's look at the help for this command:

λ rmdir /?
Removes (deletes) a directory.

RMDIR [/S] [/Q] [drive:]path
RD [/S] [/Q] [drive:]path

    /S      Removes all directories and files in the specified directory
            in addition to the directory itself.  Used to remove a directory
            tree.

    /Q      Quiet mode, do not ask if ok to remove a directory tree with /S
parse arguments.  

We can add this to the batch file to always delete all the previous files
and rebuild everything from scratch.

(Don't worry about this being very inefficient, we will fix this
later)

    if exist bin rmdir /S /Q bin
    if exist build rmdir /S /Q build

This will delete these folders and the files inside before compiling
the code.  This is essentially doing a clean and rebuild 


-----------------
07_batch.bat
-----------------
Now that we have a way to copy files and a way to delete files
we can add an option to clean all files before compiling.

You probably don't want to always delete everything and rebuild from
scratch but sometimes you do.

First I will show you the code to do this and then
explain it.

:parse_args
if "%~1" == "" goto :end_parse_args

if "%~1" == "-clean" (
    if exist bin rmdir /S /Q bin
    if exist build rmdir /S /Q build
    echo CLEANING PROJECT FILES...
    shift
)
:end_parse_args

The most important parts of this are

    "%1~"
    shift


The %~1 syntax in batch files is used to remove any 
surrounding quotes from the value of the first 
command-line argument (%1). It's particularly useful when 
dealing with command-line arguments that may include spaces 
and are wrapped in double quotes.

Here's a breakdown of what each part of %~1 does:

%1: Represents the first command-line argument passed to the batch file.

~: This tilde character, when used with the variable (%1 in this case), 
indicates that certain modifications should be applied to the 
value of the variable.

~ followed by a specific character (e.g., ~f, ~n, ~x, etc.): 
Specifies the particular modification to apply to the variable.

For example:

    @echo off

    REM Check if the first argument exists and display it with and without ~
    if not "%~1" == "" (
        echo Argument with quotes: "%1"
        echo Argument without quotes: "%~1"
    )

If you run this batch file with the following command:

    C:\> myscript.bat "Hello, World"

The output would be:

Argument with quotes: "Hello, World"
Argument without quotes: Hello, World

As you can see, %1 includes the surrounding double 
quotes of the command-line argument, while %~1 removes them.

Using %~1 is especially important when dealing 
with file paths and spaces in command-line arguments. 
It ensures that the batch file can handle such arguments correctly.


shift:

In a batch file, the shift command is used to shift the 
values of command-line arguments one position to the left. 
It is often used in batch scripts to iterate through and process 
command-line arguments one by one.

Here's how the shift command works:

The value of %1 (the first command-line argument) is discarded.
The value of %2 (the second command-line argument) becomes the new value of %1.
The value of %3 (the third command-line argument) becomes the new value of %2, 
and so on.

This allows you to process multiple command-line arguments 
sequentially without having to use a separate loop structure.

Here's a simple example that demonstrates the use of the shift command:

    @echo off

    :loop
    if "%~1" == "" goto :end_loop

    echo Argument: %1
    shift
    goto :loop

    :end_loop

In this example, the script uses a loop to iterate through 
all the command-line arguments. The shift command is used 
inside the loop to move to the next argument. When there are no 
more arguments (%1 is empty), the loop ends.

For example, if you run the batch file with the following command:

    C:\> myscript.bat arg1 arg2 arg3

The output would be:

    Argument: arg1
    Argument: arg2
    Argument: arg3

The shift command is especially useful when you want to 
process a variable number of command-line arguments 
without knowing the exact count in advance. 
It allows you to handle each argument one at a time as you shift through them.


-----------------
delayed_expansion.bat
-----------------

We aren't going to use this for this example but it is
good to know this is avaiable if you ever need it.

show the batch file and talk about the !var! stuff
